https://leetcode.com/problems/longest-substring-without-repeating-characters/description/
sliding window:
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        charset = set()
        left = 0
        res = 0

        for right in range(len(s)):
            while s[right] in charset:
                charset.remove(s[left])
                left +=1
            charset.add(s[right])
            res = max(res,right-left+1)
        return res
        

https://leetcode.com/problems/merge-two-sorted-lists/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode ()
        tail = dummy
        while list1 and list2:
            if list1.val < list2.val:
                tail.next = list1
                list1 = list1.next
            else:
                tail.next = list2
                list2 = list2.next
            tail = tail.next
        if list1:
            tail.next = list1
        elif list2:
            tail.next = list2
        return dummy.next
        

https://leetcode.com/problems/remove-element/description/

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        k=0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k]=nums[i]
                k=k+1
        return k


https://leetcode.com/problems/search-insert-position/

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        l=0
        r = len(nums)-1
        while l <= r:
            mid = (l+r)//2
            if target==nums[mid]:
                return mid
            if target < nums[mid]:
                r=mid-1
            else:
                l=mid+1
        return l
